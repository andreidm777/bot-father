{"version":3,"sources":["../../../../src/components/Cell/Cell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, noop } from '@vkontakte/vkjs';\nimport type { SwappedItemRange } from '../../hooks/useDraggableWithDomApi';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { HasRootRef } from '../../types';\nimport { Removable, RemovableProps } from '../Removable/Removable';\nimport { SimpleCell, SimpleCellProps } from '../SimpleCell/SimpleCell';\nimport { CellCheckbox, CellCheckboxProps } from './CellCheckbox/CellCheckbox';\nimport { CellDragger } from './CellDragger/CellDragger';\nimport { DEFAULT_DRAGGABLE_LABEL } from './constants';\nimport styles from './Cell.module.css';\n\nexport interface CellProps\n  extends Omit<SimpleCellProps, 'getRootRef'>,\n    RemovableProps,\n    HasRootRef<HTMLDivElement> {\n  mode?: 'removable' | 'selectable';\n  /**\n   * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет\n   */\n  draggable?: boolean;\n  /**\n   * Имя для input в режиме selectable\n   */\n  name?: string;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса cheсked, как зависящий напрямую от входящего значения\n   */\n  checked?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса defaultChecked как неконтролируемый компонент\n   */\n  defaultChecked?: boolean;\n  /**\n   * Коллбэк срабатывает при завершении перетаскивания.\n   * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.\n   * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице\n   * есть рабочий пример с обработкой этих чисел и перерисовкой списка.\n   */\n  onDragFinish?: (swappedItemRange: SwappedItemRange) => void;\n  /**\n   * Текст для кнопки перетаскивания ячейки\n   */\n  draggerLabel?: string;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/Cell\n */\nexport const Cell: React.FC<CellProps> & {\n  Checkbox: typeof CellCheckbox;\n} = ({\n  mode,\n  onRemove = noop,\n  removePlaceholder = 'Удалить',\n  onDragFinish,\n  before,\n  after,\n  disabled,\n  draggable,\n  Component: ComponentProps,\n  onChange,\n  name,\n  value,\n  checked,\n  defaultChecked,\n  getRootRef,\n  draggerLabel = DEFAULT_DRAGGABLE_LABEL,\n  className,\n  style,\n  toggleButtonTestId,\n  removeButtonTestId,\n  ...restProps\n}: CellProps) => {\n  const [dragging, setDragging] = React.useState(false);\n  const selectable = mode === 'selectable';\n  const removable = mode === 'removable';\n  const Component = selectable ? 'label' : ComponentProps;\n\n  const platform = usePlatform();\n\n  const rootElRef = useExternRef(getRootRef);\n\n  const dragger = draggable ? (\n    <CellDragger\n      elRef={rootElRef}\n      className={classNames(\n        styles['Cell__dragger'],\n        !before && !selectable && styles['Cell__control--noBefore'],\n      )}\n      disabled={disabled}\n      onDragStateChange={setDragging}\n      onDragFinish={onDragFinish}\n    >\n      {draggerLabel}\n    </CellDragger>\n  ) : null;\n\n  let checkbox;\n  if (selectable) {\n    const checkboxProps: CellCheckboxProps = {\n      name,\n      value,\n      defaultChecked,\n      checked,\n      disabled,\n      onChange,\n    };\n    checkbox = (\n      <CellCheckbox\n        className={classNames(\n          styles['Cell__checkbox'],\n          !before && styles['Cell__control--noBefore'],\n        )}\n        {...checkboxProps}\n      />\n    );\n  }\n\n  const simpleCellDisabled =\n    (draggable && !selectable) || (removable && !restProps.onClick) || disabled;\n  const hasActive = !simpleCellDisabled && !dragging;\n\n  const cellClasses = classNames(\n    styles['Cell'],\n    dragging && styles['Cell--dragging'],\n    platform === 'ios' && styles['Cell--ios'],\n    removable && styles['Cell--removable'],\n    Component === 'label' && styles['Cell--selectable'],\n    disabled && styles['Cell--disabled'],\n  );\n\n  const simpleCellProps: SimpleCellProps = {\n    hasActive: hasActive,\n    hasHover: hasActive && !removable,\n    ...restProps,\n    className: styles['Cell__content'],\n    // чтобы свойство, если не определено, не присутствовало в\n    // restProps явно как {'Component': undefined} и ниже не переопределяло\n    // возможное значение commonProps.Component = 'a' при слиянии двух объектов, как\n    // {...commonProps, ...restProps}\n    ...(Component && { Component }),\n    before: (\n      <React.Fragment>\n        {draggable && platform !== 'ios' && dragger}\n        {selectable && checkbox}\n        {before}\n      </React.Fragment>\n    ),\n    after: (\n      <React.Fragment>\n        {draggable && platform === 'ios' && dragger}\n        {after}\n      </React.Fragment>\n    ),\n  };\n\n  if (restProps.onClick) {\n    simpleCellProps.disabled = simpleCellDisabled;\n  }\n\n  if (removable) {\n    return (\n      <Removable\n        className={classNames(cellClasses, className)}\n        style={style}\n        getRootRef={rootElRef}\n        removePlaceholder={removePlaceholder}\n        onRemove={(e) => onRemove(e, rootElRef.current)}\n        toggleButtonTestId={toggleButtonTestId}\n        removeButtonTestId={removeButtonTestId}\n      >\n        {platform === 'ios' ? (\n          ({ isRemoving }) => {\n            if (simpleCellProps.onClick) {\n              simpleCellProps.disabled = isRemoving || !simpleCellProps.disabled;\n            }\n            return <SimpleCell {...simpleCellProps} />;\n          }\n        ) : (\n          <SimpleCell {...simpleCellProps} />\n        )}\n      </Removable>\n    );\n  }\n\n  return (\n    <div className={classNames(cellClasses, className)} style={style} ref={rootElRef}>\n      <SimpleCell {...simpleCellProps} />\n    </div>\n  );\n};\n\nCell.Checkbox = CellCheckbox;\n"],"names":["React","classNames","noop","useExternRef","usePlatform","Removable","SimpleCell","CellCheckbox","CellDragger","DEFAULT_DRAGGABLE_LABEL","styles","Cell","mode","onRemove","removePlaceholder","onDragFinish","before","after","disabled","draggable","Component","ComponentProps","onChange","name","value","checked","defaultChecked","getRootRef","draggerLabel","className","style","toggleButtonTestId","removeButtonTestId","restProps","dragging","setDragging","useState","selectable","removable","platform","rootElRef","dragger","elRef","onDragStateChange","checkbox","checkboxProps","simpleCellDisabled","onClick","hasActive","cellClasses","simpleCellProps","hasHover","Fragment","e","current","isRemoving","div","ref","Checkbox"],"mappings":"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"}