import * as React from 'react';
import { HTMLAttributesWithRootRef } from '../../types';
import { SpinnerProps } from '../Spinner/Spinner';
export interface ScreenSpinnerProps extends SpinnerProps {
    state?: 'loading' | 'cancelable' | 'done' | 'error';
    cancelLabel?: string;
}
export interface ScreenSpinnerContextProps {
    state: NonNullable<ScreenSpinnerProps['state']>;
}
export declare const ScreenSpinnerContext: React.Context<ScreenSpinnerContextProps>;
declare const ScreenSpinnerLoader: React.FC<SpinnerProps>;
type ScreenSpinnerSwapIconProps = HTMLAttributesWithRootRef<HTMLElement> & {
    cancelLabel?: ScreenSpinnerProps['cancelLabel'];
};
declare const ScreenSpinnerSwapIcon: React.FC<ScreenSpinnerSwapIconProps>;
type ScreenSpinnerContainerProps = HTMLAttributesWithRootRef<HTMLSpanElement> & Pick<ScreenSpinnerProps, 'state'>;
declare const ScreenSpinnerContainer: React.FC<ScreenSpinnerContainerProps>;
/**
 * @see https://vkcom.github.io/VKUI/#/ScreenSpinner
 */
export declare const ScreenSpinner: React.FC<ScreenSpinnerProps> & {
    Container: typeof ScreenSpinnerContainer;
    Loader: typeof ScreenSpinnerLoader;
    SwapIcon: typeof ScreenSpinnerSwapIcon;
};
export {};
//# sourceMappingURL=ScreenSpinner.d.ts.map