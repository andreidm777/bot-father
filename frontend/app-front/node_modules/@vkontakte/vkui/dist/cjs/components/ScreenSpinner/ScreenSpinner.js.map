{"version":3,"sources":["../../../../src/components/ScreenSpinner/ScreenSpinner.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Icon24Cancel } from '@vkontakte/icons';\nimport { classNames } from '@vkontakte/vkjs';\nimport { mergeCalls } from '../../lib/mergeCalls';\nimport { clickByKeyboardHandler } from '../../lib/utils';\nimport { HTMLAttributesWithRootRef } from '../../types';\nimport { useScrollLock } from '../AppRoot/ScrollContext';\nimport { PopoutWrapper } from '../PopoutWrapper/PopoutWrapper';\nimport { RootComponent } from '../RootComponent/RootComponent';\nimport { Spinner, SpinnerProps } from '../Spinner/Spinner';\nimport { Icon48CancelCircle } from './Icon48CancelCircle';\nimport { Icon48DoneOutline } from './Icon48DoneOutline';\nimport styles from './ScreenSpinner.module.css';\n\nexport interface ScreenSpinnerProps extends SpinnerProps {\n  state?: 'loading' | 'cancelable' | 'done' | 'error';\n  cancelLabel?: string;\n}\n\nexport interface ScreenSpinnerContextProps {\n  state: NonNullable<ScreenSpinnerProps['state']>;\n}\n\nexport const ScreenSpinnerContext: React.Context<ScreenSpinnerContextProps> =\n  React.createContext<ScreenSpinnerContextProps>({\n    state: 'loading',\n  });\n\nconst stateClassNames = {\n  cancelable: styles['ScreenSpinner--state-cancelable'],\n  done: styles['ScreenSpinner--state-done'],\n  error: styles['ScreenSpinner--state-error'],\n};\n\nconst ScreenSpinnerLoader: React.FC<SpinnerProps> = ({\n  size = 'large',\n  children = 'Пожалуйста, подождите...',\n  ...restProps\n}: SpinnerProps) => {\n  return (\n    <Spinner className={styles['ScreenSpinner__spinner']} size={size} {...restProps}>\n      {children}\n    </Spinner>\n  );\n};\n\nScreenSpinnerLoader.displayName = 'ScreenSpinner.Loader';\n\ntype ScreenSpinnerSwapIconProps = HTMLAttributesWithRootRef<HTMLElement> & {\n  cancelLabel?: ScreenSpinnerProps['cancelLabel'];\n};\n\nconst ScreenSpinnerCancelIcon: React.FC<ScreenSpinnerSwapIconProps> = ({\n  onKeyDown,\n  'aria-label': ariaLabel = 'Отменить',\n  ...restProps\n}: ScreenSpinnerSwapIconProps) => {\n  const handlers = mergeCalls(\n    { onKeyDown: clickByKeyboardHandler },\n    {\n      onKeyDown,\n    },\n  );\n  let clickableProps: React.HTMLAttributes<HTMLSpanElement> = {\n    ...handlers,\n    'tabIndex': 0,\n    'role': 'button',\n    'aria-label': ariaLabel,\n  };\n\n  return (\n    <RootComponent baseClassName={styles['ScreenSpinner__icon']} {...clickableProps} {...restProps}>\n      <Icon24Cancel />\n    </RootComponent>\n  );\n};\n\nconst ScreenSpinnerSwapIcon: React.FC<ScreenSpinnerSwapIconProps> = ({\n  cancelLabel,\n  ...restProps\n}: ScreenSpinnerSwapIconProps) => {\n  const { state } = React.useContext(ScreenSpinnerContext);\n\n  if (state === 'cancelable') {\n    return <ScreenSpinnerCancelIcon aria-label={cancelLabel} {...restProps} />;\n  }\n\n  const Icon = {\n    loading: () => null,\n    done: Icon48DoneOutline,\n    error: Icon48CancelCircle,\n  }[state];\n\n  return (\n    <RootComponent baseClassName={styles['ScreenSpinner__icon']} {...restProps}>\n      <Icon />\n    </RootComponent>\n  );\n};\n\nScreenSpinnerSwapIcon.displayName = 'ScreenSpinner.SwapIcon';\n\ntype ScreenSpinnerContainerProps = HTMLAttributesWithRootRef<HTMLSpanElement> &\n  Pick<ScreenSpinnerProps, 'state'>;\n\nconst ScreenSpinnerContainer: React.FC<ScreenSpinnerContainerProps> = ({\n  state = 'loading',\n  ...restProps\n}: ScreenSpinnerContainerProps) => {\n  return (\n    <ScreenSpinnerContext.Provider value={{ state }}>\n      <RootComponent\n        baseClassName={classNames(\n          styles['ScreenSpinner'],\n          state !== 'loading' && stateClassNames[state],\n        )}\n        {...restProps}\n      />\n    </ScreenSpinnerContext.Provider>\n  );\n};\n\nScreenSpinnerContainer.displayName = 'ScreenSpinner.Container';\n\n/**\n * @see https://vkcom.github.io/VKUI/#/ScreenSpinner\n */\nexport const ScreenSpinner: React.FC<ScreenSpinnerProps> & {\n  Container: typeof ScreenSpinnerContainer;\n  Loader: typeof ScreenSpinnerLoader;\n  SwapIcon: typeof ScreenSpinnerSwapIcon;\n} = ({\n  style,\n  className,\n  state = 'loading',\n  onClick,\n  cancelLabel,\n  ...restProps\n}: ScreenSpinnerProps): React.ReactNode => {\n  useScrollLock();\n\n  return (\n    <PopoutWrapper className={className} style={style} noBackground>\n      <ScreenSpinnerContainer state={state}>\n        <ScreenSpinnerLoader {...restProps} />\n        <ScreenSpinnerSwapIcon onClick={onClick} cancelLabel={cancelLabel} />\n      </ScreenSpinnerContainer>\n    </PopoutWrapper>\n  );\n};\n\nScreenSpinner.displayName = 'ScreenSpinner';\n\nScreenSpinner.Container = ScreenSpinnerContainer;\nScreenSpinner.Container.displayName = 'ScreenSpinner.Container';\n\nScreenSpinner.Loader = ScreenSpinnerLoader;\nScreenSpinner.Loader.displayName = 'ScreenSpinner.Loader';\n\nScreenSpinner.SwapIcon = ScreenSpinnerSwapIcon;\nScreenSpinner.SwapIcon.displayName = 'ScreenSpinner.SwapIcon';\n"],"names":["ScreenSpinner","ScreenSpinnerContext","React","createContext","state","stateClassNames","cancelable","done","error","ScreenSpinnerLoader","size","children","restProps","Spinner","className","displayName","ScreenSpinnerCancelIcon","onKeyDown","ariaLabel","handlers","mergeCalls","clickByKeyboardHandler","clickableProps","RootComponent","baseClassName","Icon24Cancel","ScreenSpinnerSwapIcon","cancelLabel","useContext","aria-label","Icon","loading","Icon48DoneOutline","Icon48CancelCircle","ScreenSpinnerContainer","Provider","value","classNames","style","onClick","useScrollLock","PopoutWrapper","noBackground","Container","Loader","SwapIcon"],"mappings":";;;;;;;;;;;IA+HaA,aAAa;eAAbA;;IAxGAC,oBAAoB;eAApBA;;;;;;;;iEAvBU;uBACM;sBACF;4BACA;uBACY;+BAET;+BACA;+BACA;yBACQ;oCACH;mCACD;AAY3B,MAAMA,qCACXC,OAAMC,aAAa,CAA4B;IAC7CC,OAAO;AACT;AAEF,MAAMC,kBAAkB;IACtBC,UAAU;IACVC,IAAI;IACJC,KAAK;AACP;AAEA,MAAMC,sBAA8C;QAAC,EACnDC,OAAO,OAAO,EACdC,WAAW,0BAA0B,EAExB,WADVC;QAFHF;QACAC;;IAGA,qBACE,qBAACE,gBAAO;QAACC,SAAS;QAAoCJ,MAAMA;OAAUE;kBACnED;;AAGP;AAEAF,oBAAoBM,WAAW,GAAG;AAMlC,MAAMC,0BAAgE;QAAC,EACrEC,SAAS,EACT,cAAcC,YAAY,UAAU,EAET,WADxBN;QAFHK;QACA;;IAGA,MAAME,WAAWC,IAAAA,sBAAU,EACzB;QAAEH,WAAWI,6BAAsB;IAAC,GACpC;QACEJ;IACF;IAEF,IAAIK,iBAAwD,4CACvDH;QACH,YAAY;QACZ,QAAQ;QACR,cAAcD;;IAGhB,qBACE,qBAACK,4BAAa;QAACC,aAAa;OAAqCF,gBAAoBV;kBACnF,cAAA,qBAACa,mBAAY;;AAGnB;AAEA,MAAMC,wBAA8D;QAAC,EACnEC,WAAW,EAEgB,WADxBf;QADHe;;IAGA,MAAM,EAAEvB,KAAK,EAAE,GAAGF,OAAM0B,UAAU,CAAC3B;IAEnC,IAAIG,UAAU,cAAc;QAC1B,qBAAO,qBAACY;YAAwBa,cAAYF;WAAiBf;IAC/D;IAEA,MAAMkB,OAAO;QACXC,SAAS,IAAM;QACfxB,MAAMyB,oCAAiB;QACvBxB,OAAOyB,sCAAkB;IAC3B,CAAC,CAAC7B,MAAM;IAER,qBACE,qBAACmB,4BAAa;QAACC,aAAa;OAAqCZ;kBAC/D,cAAA,qBAACkB;;AAGP;AAEAJ,sBAAsBX,WAAW,GAAG;AAKpC,MAAMmB,yBAAgE;QAAC,EACrE9B,QAAQ,SAAS,EAEW,WADzBQ;QADHR;;IAGA,qBACE,qBAACH,qBAAqBkC,QAAQ;QAACC,OAAO;YAAEhC;QAAM;kBAC5C,cAAA,qBAACmB,4BAAa;YACZC,eAAea,IAAAA,gBAAU,uBAEvBjC,UAAU,aAAaC,eAAe,CAACD,MAAM;WAE3CQ;;AAIZ;AAEAsB,uBAAuBnB,WAAW,GAAG;AAK9B,MAAMf,gBAIT;QAAC,EACHsC,KAAK,EACLxB,SAAS,EACTV,QAAQ,SAAS,EACjBmC,OAAO,EACPZ,WAAW,EAEQ,WADhBf;QALH0B;QACAxB;QACAV;QACAmC;QACAZ;;IAGAa,IAAAA,4BAAa;IAEb,qBACE,qBAACC,4BAAa;QAAC3B,WAAWA;QAAWwB,OAAOA;QAAOI,YAAY;kBAC7D,cAAA,sBAACR;YAAuB9B,OAAOA;;8BAC7B,qBAACK,0CAAwBG;8BACzB,qBAACc;oBAAsBa,SAASA;oBAASZ,aAAaA;;;;;AAI9D;AAEA3B,cAAce,WAAW,GAAG;AAE5Bf,cAAc2C,SAAS,GAAGT;AAC1BlC,cAAc2C,SAAS,CAAC5B,WAAW,GAAG;AAEtCf,cAAc4C,MAAM,GAAGnC;AACvBT,cAAc4C,MAAM,CAAC7B,WAAW,GAAG;AAEnCf,cAAc6C,QAAQ,GAAGnB;AACzB1B,cAAc6C,QAAQ,CAAC9B,WAAW,GAAG"}